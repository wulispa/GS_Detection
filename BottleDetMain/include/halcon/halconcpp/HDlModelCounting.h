/***********************************************************
 * File generated by the HALCON-Compiler hcomp version 23.11
 * Usage: Interface to C++
 *
 * Software by: MVTec Software GmbH, www.mvtec.com
 ***********************************************************/


#ifndef HCPP_HDLMODELCOUNTING
#define HCPP_HDLMODELCOUNTING

namespace HalconCpp
{

// Represents an instance of a Deep Neural Network based Deep Counting model.
class LIntExport HDlModelCounting : public HHandle
{

public:

  // Create an uninitialized instance
  HDlModelCounting():HHandle() {}

  // Copy constructor
  HDlModelCounting(const HDlModelCounting& source) : HHandle(source) {}

#if __cplusplus >= 201103
  // C++11 deprecates declaration of an implicit default assignment operator if
  // the class has a custom copy constructor.
  HDlModelCounting& operator=(const HDlModelCounting&) = default;
#endif

  // Copy constructor
  HDlModelCounting(const HHandle& handle);

  // Create HDlModelCounting from handle, taking ownership
  explicit HDlModelCounting(Hlong handle);

  bool operator==(const HHandle& obj) const
  {
    return HHandleBase::operator==(obj);
  }

  bool operator!=(const HHandle& obj) const
  {
    return HHandleBase::operator!=(obj);
  }

protected:

  // Verify matching semantic type ('deep_counting')!
  virtual void AssertType(Hphandle handle) const;

public:



/*****************************************************************************
 * Operator-based class constructors
 *****************************************************************************/

  // create_deep_counting_model: Create a Deep Counting model for counting objects.
  explicit HDlModelCounting(const HTuple& GenParamName, const HTuple& GenParamValue);

  // create_deep_counting_model: Create a Deep Counting model for counting objects.
  explicit HDlModelCounting(const HString& GenParamName, double GenParamValue);

  // create_deep_counting_model: Create a Deep Counting model for counting objects.
  explicit HDlModelCounting(const char* GenParamName, double GenParamValue);

#ifdef _WIN32
  // create_deep_counting_model: Create a Deep Counting model for counting objects.
  explicit HDlModelCounting(const wchar_t* GenParamName, double GenParamValue);
#endif

  // read_deep_counting_model: Read a Deep Counting model from a file.
  explicit HDlModelCounting(const HString& FileName);

  // read_deep_counting_model: Read a Deep Counting model from a file.
  explicit HDlModelCounting(const char* FileName);

#ifdef _WIN32
  // read_deep_counting_model: Read a Deep Counting model from a file.
  explicit HDlModelCounting(const wchar_t* FileName);
#endif




  /***************************************************************************
   * Operators                                                               *
   ***************************************************************************/

  // Apply a Deep Counting model on a set of images for inference. 
  HTuple ApplyDeepCountingModel(const HImage& Image, HDictArray* DeepCountingResult) const;

  // Apply a Deep Counting model on a set of images for inference. 
  Hlong ApplyDeepCountingModel(const HImage& Image, HDict* DeepCountingResult) const;

  // Create a Deep Counting model for counting objects.
  void CreateDeepCountingModel(const HTuple& GenParamName, const HTuple& GenParamValue);

  // Create a Deep Counting model for counting objects.
  void CreateDeepCountingModel(const HString& GenParamName, double GenParamValue);

  // Create a Deep Counting model for counting objects.
  void CreateDeepCountingModel(const char* GenParamName, double GenParamValue);

#ifdef _WIN32
  // Create a Deep Counting model for counting objects.
  void CreateDeepCountingModel(const wchar_t* GenParamName, double GenParamValue);
#endif

  // Return the parameters of a Deep Counting model.
  HTuple GetDeepCountingModelParam(const HString& GenParamName) const;

  // Return the parameters of a Deep Counting model.
  HTuple GetDeepCountingModelParam(const char* GenParamName) const;

#ifdef _WIN32
  // Return the parameters of a Deep Counting model.
  HTuple GetDeepCountingModelParam(const wchar_t* GenParamName) const;
#endif

  // Set templates of a Deep Counting model.
  void PrepareDeepCountingModel(const HImage& Templates) const;

  // Read a Deep Counting model from a file.
  void ReadDeepCountingModel(const HString& FileName);

  // Read a Deep Counting model from a file.
  void ReadDeepCountingModel(const char* FileName);

#ifdef _WIN32
  // Read a Deep Counting model from a file.
  void ReadDeepCountingModel(const wchar_t* FileName);
#endif

  // Set selected parameters of the Deep Counting model.
  void SetDeepCountingModelParam(const HTuple& GenParamName, const HTuple& GenParamValue) const;

  // Set selected parameters of the Deep Counting model.
  void SetDeepCountingModelParam(const HString& GenParamName, double GenParamValue) const;

  // Set selected parameters of the Deep Counting model.
  void SetDeepCountingModelParam(const char* GenParamName, double GenParamValue) const;

#ifdef _WIN32
  // Set selected parameters of the Deep Counting model.
  void SetDeepCountingModelParam(const wchar_t* GenParamName, double GenParamValue) const;
#endif

  // Write a Deep Counting model in a file.
  void WriteDeepCountingModel(const HString& FileName) const;

  // Write a Deep Counting model in a file.
  void WriteDeepCountingModel(const char* FileName) const;

#ifdef _WIN32
  // Write a Deep Counting model in a file.
  void WriteDeepCountingModel(const wchar_t* FileName) const;
#endif

};

// forward declarations and types for internal array implementation

template<class T> class HSmartPtr;
template<class T> class HHandleBaseArrayRef;

typedef HHandleBaseArrayRef<HDlModelCounting> HDlModelCountingArrayRef;
typedef HSmartPtr< HDlModelCountingArrayRef > HDlModelCountingArrayPtr;


// Represents multiple tool instances
class LIntExport HDlModelCountingArray : public HHandleBaseArray
{

public:

  // Create empty array
  HDlModelCountingArray();

  // Create array from native array of tool instances
  HDlModelCountingArray(const HDlModelCounting* classes, Hlong length);

  // Copy constructor
  HDlModelCountingArray(const HDlModelCountingArray &tool_array);

  // Destructor
  virtual ~HDlModelCountingArray();

  // Assignment operator
  HDlModelCountingArray &operator=(const HDlModelCountingArray &tool_array);

  // Clears array and all tool instances
  virtual void Clear();

  // Get array of native tool instances
  const HDlModelCounting* Tools() const;

  // Get number of tools
  virtual Hlong Length() const;

  // Create tool array from tuple of handles
  virtual void SetFromTuple(const HTuple& handles);

  // Get tuple of handles for tool array
  virtual HTuple ConvertToTuple() const;

protected:

// Smart pointer to internal data container
   HDlModelCountingArrayPtr *mArrayPtr;
};

}

#endif
